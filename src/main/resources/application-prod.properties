# ==========================================
# Configuration de la Base de Données H2
# ==========================================
# URL de la base de données (H2 en mémoire pour tests rapides).
spring.datasource.url=jdbc:h2:mem:testdb
# Pilote JDBC pour H2.
spring.datasource.driverClassName=org.h2.Driver
# Identifiants de connexion.
spring.datasource.username=sa
spring.datasource.password=
# Active la console H2 (utile pour déboguer).
spring.h2.console.enabled=true
# Mise à jour automatique du schéma (désactiver en production).
spring.jpa.hibernate.ddl-auto=update

# ==========================================
# Configuration de Thymeleaf
# ==========================================
# Active le cache des templates pour améliorer la vitesse d'affichage.
spring.thymeleaf.cache=true
# Mode de traitement rapide pour Thymeleaf.
spring.thymeleaf.mode=LEGACYHTML5

# ==========================================
# Configuration du Cache Hibernate
# ==========================================
# Activer le cache de second niveau pour éviter les rechargements inutiles.
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
# Activer le cache des requêtes fréquemment utilisées.
spring.jpa.properties.hibernate.cache.use_query_cache=true
# Type de cache utilisé : rapide et performant.
spring.cache.type=caffeine

# ==========================================
# Configuration du Pool de Connexions (HikariCP)
# ==========================================
# Taille maximale du pool pour gérer 100 utilisateurs simultanés avec marge pour les pics.
spring.datasource.hikari.maximum-pool-size=40
# Temps maximum pour obtenir une connexion (ms).
spring.datasource.hikari.connection-timeout=30000
# Temps d'inactivité avant de fermer une connexion inutilisée (ms).
spring.datasource.hikari.idle-timeout=600000
# Durée maximale de vie d'une connexion (ms).
spring.datasource.hikari.max-lifetime=1800000
# Test des connexions pour éviter les connexions mortes.
spring.datasource.hikari.test-on-borrow=true
# Requête de validation utilisée pour les tests de connexion.
spring.datasource.hikari.validation-query=SELECT 1

# ==========================================
# Configuration Avancée pour la Supervision
# ==========================================
# Activation d'Actuator pour surveiller les performances du pool.
management.endpoints.web.exposure.include=health,metrics
# Activer les logs pour superviser les connexions.
logging.level.com.zaxxer.hikari.HikariDataSource=DEBUG

# ==========================================
# Configuration des Performances (JVM et Threading)
# ==========================================
# Taille du pool de threads pour traiter les requêtes simultanées.
server.tomcat.threads.max=200
server.tomcat.threads.min-spare=20
# Temps maximum pour exécuter une requête avant expiration.
server.tomcat.connection-timeout=30000

# ==========================================
# Configuration de la Mémoire JVM (Heap et Metaspace)
# ==========================================
# Définition des options JVM pour la gestion de la mémoire dans Spring Boot
# Ce paramétrage s'applique en ajoutant ces variables dans le script de lancement ou les arguments JVM.

# Configuration de la taille initiale et maximale de la mémoire Heap
# Taille initiale de la mémoire Heap, ici définie à 512MB
spring.boot.jvmArguments=-Xms512m
# Taille maximale de la mémoire Heap, ici définie à 2GB
spring.boot.jvmArguments=-Xmx2g

# Configuration du Metaspace (utilisé pour le stockage des métadonnées des classes dans Java 8+)
# Taille initiale de la Metaspace
spring.boot.jvmArguments=-XX:MetaspaceSize=128m
# Taille maximale de la Metaspace
spring.boot.jvmArguments=-XX:MaxMetaspaceSize=512m

# Activation du Garbage Collector G1 (optimal pour des applications à faible latence)
spring.boot.jvmArguments=-XX:+UseG1GC
# Définition du temps maximal acceptable pour les pauses du Garbage Collector (en millisecondes)
spring.boot.jvmArguments=-XX:MaxGCPauseMillis=200
# Pourcentage de la Heap occupée avant de déclencher le GC
spring.boot.jvmArguments=-XX:InitiatingHeapOccupancyPercent=45
# Active la génération de logs détaillés pour le Garbage Collector
spring.boot.jvmArguments=-XX:+PrintGCDetails
spring.boot.jvmArguments=-XX:+PrintGCDateStamps
spring.boot.jvmArguments=-XX:+PrintGCTimeStamps
spring.boot.jvmArguments=-Xlog:gc*:logs/gc.log